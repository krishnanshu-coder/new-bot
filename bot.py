import os
import requests
import random
from datetime import datetime
import time
import logging
import tempfile

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

class SimpleVideoUploadBot:
    def __init__(self):
        # Load configuration from environment variables
        self.page_access_token = os.getenv('FACEBOOK_PAGE_TOKEN')
        self.page_id = os.getenv('FACEBOOK_PAGE_ID')
        self.video_urls = self.load_video_urls()
        self.facebook_api_base = "https://graph.facebook.com/v18.0"
        self.temp_dir = tempfile.mkdtemp()
        
        # Validate configuration
        if not self.page_access_token or not self.page_id:
            raise ValueError("Missing Facebook credentials in environment variables")
        
        logging.info("ü§ñ Simple Upload Bot initialized successfully")
    
    def load_video_urls(self):
        # First try environment variable
        urls_env = os.getenv('VIDEO_URLS')
        if urls_env:
            urls = [url.strip() for url in urls_env.split(',') if url.strip()]
            logging.info(f"üìö Loaded {len(urls)} video URLs from environment variable")
            return urls
        
        # Otherwise load from video_list.txt (generated by generate_video_list.py)
        elif os.path.exists("video_list.txt"):
            with open("video_list.txt", "r") as f:
                urls = [line.strip() for line in f if line.strip()]
                logging.info(f"üìö Loaded {len(urls)} video URLs from video_list.txt")
                return urls
        else:
            logging.error("‚ùå No VIDEO_URLS env or video_list.txt found")
            return []
    
    def download_video(self, video_url):
        """Download video from URL to temporary directory"""
        try:
            logging.info(f"‚¨áÔ∏è Downloading video from Google Drive...")
            
            # Create temporary file
            temp_file = os.path.join(self.temp_dir, f"clip_{int(time.time())}.mp4")
            
            # Handle Google Drive links with session for large files
            session = requests.Session()
            
            # First request to get the download warning page if any
            response = session.get(video_url, stream=True, timeout=60)
            
            # Look for the actual download link in case of virus scan warning
            if "confirm=" in response.text:
                # Extract the confirm token
                import re
                confirm_token = re.search(r'confirm=([^&]+)', response.text)
                if confirm_token:
                    download_url = video_url + f"&confirm={confirm_token.group(1)}"
                    response = session.get(download_url, stream=True, timeout=600)
            
            response.raise_for_status()
            
            # Download the file
            with open(temp_file, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
            
            # Verify download
            file_size = os.path.getsize(temp_file)
            if file_size < 1024 * 50:  # Less than 50KB might be an error page
                logging.error(f"‚ùå Downloaded file seems too small ({file_size} bytes)")
                return None
            
            logging.info(f"‚úÖ Video downloaded successfully: {file_size / (1024*1024):.1f} MB")
            return temp_file
            
        except Exception as e:
            logging.error(f"‚ùå Error downloading video: {e}")
            return None
    
    def generate_hashtags(self, post_time):
        """Generate engaging hashtags for the post"""
        base_hashtags = ["#viral", "#shorts", "#trending", "#reels"]
        
        time_based = {
            "morning": ["#GoodMorning", "#MorningVibes", "#StartYourDay", "#MotivationMonday"],
            "evening": ["#EveningVibes", "#Unwind", "#AfterWork", "#ChillTime", "#Relax"],
            "manual": ["#Daily", "#Content", "#Entertainment", "#Fun"]
        }
        
        growth_hashtags = [
            "#Explore", "#ForYou", "#Viral", "#Share", "#Like", "#Follow",
            "#Entertainment", "#Fun", "#Amazing", "#MustWatch", "#DontMiss",
            "#Awesome", "#Epic", "#Cool", "#Video", "#Facebook"
        ]
        
        # Select hashtags
        selected = base_hashtags.copy()
        selected.extend(random.sample(time_based.get(post_time, time_based["manual"]), 2))
        selected.extend(random.sample(growth_hashtags, 6))
        
        return " ".join(selected)
    
    def upload_to_facebook(self, video_path, description=""):
        """Upload video to Facebook page with retry logic"""
        max_retries = 3
        
        for attempt in range(max_retries):
            try:
                logging.info(f"üì§ Uploading to Facebook (attempt {attempt + 1}/3)")
                
                url = f"{self.facebook_api_base}/{self.page_id}/videos"
                
                with open(video_path, 'rb') as video_file:
                    files = {'source': video_file}
                    data = {
                        'access_token': self.page_access_token,
                        'description': description,
                        'published': True,
                        'title': f"Daily Clip - {datetime.now().strftime('%Y-%m-%d %H:%M')}"
                    }
                    
                    response = requests.post(url, files=files, data=data, timeout=900)
                    response.raise_for_status()
                    
                    result = response.json()
                    video_id = result.get('id')
                    
                    if video_id:
                        logging.info(f"‚úÖ Video uploaded successfully! Video ID: {video_id}")
                        return video_id
                    else:
                        logging.error(f"‚ùå Upload failed: {result}")
                        print("Facebook API Response:", response.text)
                        print("Response Headers:", response.headers)
                        
            except Exception as e:
                logging.error(f"‚ùå Error uploading to Facebook (attempt {attempt + 1}): {e}")
                if attempt < max_retries - 1:
                    logging.info("‚è≥ Waiting 30 seconds before retry...")
                    time.sleep(30)
        
        return None
    
    def cleanup_file(self, file_path):
        """Safely remove a file"""
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
                logging.info(f"üßπ Cleaned up: {os.path.basename(file_path)}")
        except Exception as e:
            logging.error(f"‚ùå Error cleaning up {file_path}: {e}")
    
    def run_scheduled_upload(self):
        """Run the scheduled upload process - 1 clip only"""
        try:
            current_hour = datetime.now().hour
            current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            
            logging.info(f"üïê Current time: {current_time} (Hour: {current_hour})")
            
            # Determine if it's morning (5 AM) or evening (5 PM) post
            if current_hour == 5 or current_hour == 23:  # 5 AM IST or 11 PM UTC (5 AM IST next day)
                post_time = "morning"
            elif current_hour == 17 or current_hour == 11:  # 5 PM IST or 11 AM UTC
                post_time = "evening"
            else:
                # For manual testing, always run
                post_time = "manual"
                logging.info(f"üß™ Running manual test at hour {current_hour}")
            
            logging.info(f"üéØ Starting {post_time} upload process")
            
            if not self.video_urls:
                logging.error("‚ùå No video URLs available")
                return
            
            logging.info(f"üìö Available clips: {len(self.video_urls)}")
            
            # Select a random clip from your 10 clips
            selected_url = random.choice(self.video_urls)
            logging.info(f"üé¨ Selected clip: {selected_url[:50]}...")
            
            # Download the clip
            video_file = self.download_video(selected_url)
            if not video_file:
                logging.error("‚ùå Failed to download clip")
                return
            
            # Generate description with hashtags
            current_time = datetime.now().strftime('%Y-%m-%d %H:%M')
            hashtags = self.generate_hashtags(post_time)
            
            description = f"""üî• Daily {post_time.title()} Clip - {current_time}

{hashtags}

üé¨ Like & Follow for more amazing content!
üì± Turn on notifications to never miss our clips!
üí¨ Comment what you think!"""
            
            # Upload directly to Facebook (no processing)
            video_id = self.upload_to_facebook(video_file, description)
            
            # Cleanup
            self.cleanup_file(video_file)
            
            if video_id:
                logging.info(f"üéâ {post_time.title()} clip uploaded successfully! üéâ")
            else:
                logging.error(f"‚ùå {post_time.title()} upload failed!")
            
        except Exception as e:
            logging.error(f"üí• Error in run_scheduled_upload: {e}")
        finally:
            # Clean up temp directory
            self.cleanup_temp_dir()
    
    def cleanup_temp_dir(self):
        """Clean up temporary directory"""
        try:
            import shutil
            if os.path.exists(self.temp_dir):
                shutil.rmtree(self.temp_dir)
                self.temp_dir = tempfile.mkdtemp()
                logging.info("üßπ Temporary directory cleaned up")
        except Exception as e:
            logging.error(f"‚ùå Error cleaning temp directory: {e}")

def main():
    """Main function to run the automated bot"""
    try:
        logging.info("ü§ñ Starting Simple Video Upload Bot...")
        logging.info("üìã Configuration:")
        logging.info(f"   - Facebook Page ID: {'‚úÖ Set' if os.getenv('FACEBOOK_PAGE_ID') else '‚ùå Missing'}")
        logging.info(f"   - Facebook Token: {'‚úÖ Set' if os.getenv('FACEBOOK_PAGE_TOKEN') else '‚ùå Missing'}")
        logging.info(f"   - Video List File: {'‚úÖ Found' if os.path.exists('video_list.txt') else '‚ùå Missing'}")
        
        bot = SimpleVideoUploadBot()
        bot.run_scheduled_upload()
        
        logging.info("üèÅ Bot execution completed!")
        
    except Exception as e:
        logging.error(f"üí• Fatal error: {e}")
        raise

if __name__ == "__main__":
    main()

